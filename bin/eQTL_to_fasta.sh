#!/bin/bash

### Description ###

# This script takes significant eQTL variants from a VCF file and generates two FASTA files.
# The FASTA files contains the eQTL with flanking reference genome sequences of the reference allele and alternative allele
# The FASTA files will be used for miRNA binding predicition

### Input variables ###

if [ $# -ne 6 ]
then
    echo "Usage: $0 <eQTL CSV file> <variant VCF file> <GTF BED file> <Genome FASTA file> <output path> <output prefix>"
    echo "  1) input eQTL CSV file as generated by eqtl-adjusted-pvalue.py"
    echo "  2) VCF file containing all 3'UTR genetic variants as generated by VCF_filtering_annotation.sh"
    echo "  3) BED file converted from genome GTF file"
    echo "  4) reference genome FASTA file (not gzipped!)"
    echo "  5) output path"
    echo "  6) outprefix for output files"
    exit 1
fi

eqtl_csv_file=$1
vcf_file=$2
genomefeatures_bed_file=$3
genomereference_fasta_file=$4
output_path=$5
outprefix=$6

mkdir -p ${output_path}
outprefix=${output_path%/}/${outprefix}

### Parameters ###
offset=22  # Amount of nucleotides that flank a variant upstream and downstream

### Paths to utilities and scripts ###
p2bedtools=$(which bedtools)
p2bcftools=$(which bcftools)
p2bgzip=$(which bgzip)
p2script=generate_alternative_fasta.py

### Code ###

# Select variants that are significant and save output to a txt file to use in grep
cat ${eqtl_csv_file} |\
 awk -F"," '{if ($3 < 0.05) print $0}' |\
 cut -d"," -f2 |\
 cut -d"_" -f1 |\
 awk -F":" '{print $1 "\t" $2 "\t" $2}' |\
 sort |\
 uniq > ${outprefix}.grep.bed

# Make a VCF file with only eQTL variants append those variants to a CSV file
# The CSV file contains the genomic position and the variant sequence of the reference and alternative allele
eqtl_vcf_file=${outprefix}.eQTLs.vcf
gzcat ${vcf_file} |\
 head -n 1000 |\
 grep "#" > ${eqtl_vcf_file} #VCF header

${p2bedtools} intersect -a ${vcf_file} -b ${outprefix}.grep.bed |\
 uniq  >> ${eqtl_vcf_file} #VCF variants

eqtl_vcf_file_sort=${outprefix}.eQTLs.sort.vcf
${p2bcftools} sort -o ${eqtl_vcf_file_sort} ${eqtl_vcf_file}

eqtl_vcf_file=${eqtl_vcf_file_sort}
$p2bgzip -f ${eqtl_vcf_file}
eqtl_vcf_file=${eqtl_vcf_file}.gz

variant_csv_file=${outprefix}.eQTLs.pos_alt_ref.csv
${p2bcftools} query -f  '%CHROM %POS %REF %ALT\n' ${eqtl_vcf_file} |\
 awk '{OFS="\t"}{print $1, $2, $3, $4}' > ${variant_csv_file}

# Make a BED file that contains the eQTL variant nucleotide position plus and minus a fixed offset.
eqtl_bed_file=${outprefix}.eQTLs.bed

${p2bcftools} query -f '%CHROM %POS %Gene\n' $eqtl_vcf_file |\
 awk -v offset=${offset} '{OFS="\t"}{print $1, $2-offset, $2+offset, $3"_"$1":"$2}' |\
 sort |\
 uniq > ${eqtl_bed_file}

# Extract and append the strand from a GTF converted BED file to the eQTL BED file
# The strand (sense or antisense) is needed to fetch the correct FASTA sequence.

tmp_eqtl_bed_file=${outprefix}.eQTLs.strand.bed.tmp

rm -f ${tmp_eqtl_bed_file} # Try to remove to make sure it does not exist already

SUB=","

cat ${eqtl_bed_file} | while read -r line
do
	gene=$(echo $line | awk -F" |_" '{print $4}')
	if grep -q "$SUB" <<< "${gene}"
	then
		gene1=$(echo ${gene} | cut -d"," -f1)
		gene2=$(echo ${gene} | cut -d"," -f2)

		strand1=$(rg "\t${gene1}\t" ${genomefeatures_bed_file} | cut -f6)
		strand2=$(rg "\t${gene2}\t" ${genomefeatures_bed_file} | cut -f6)

		new_line1=$(echo ${line} | sed "s/${gene}/${gene1}/g")
		new_line1=${new_line1}" . ${strand1}"

		new_line2=$(echo ${line} | sed "s/${gene}/${gene2}/g")
		new_line2=${new_line2}" . ${strand2}"

		echo ${new_line1} >> ${tmp_eqtl_bed_file}
		echo ${new_line2} >> ${tmp_eqtl_bed_file}
	else
		strand=$(rg "\t${gene}\t" ${genomefeatures_bed_file} | cut -f6)
		
		new_line=$(echo ${line} | sed "s/ /\t/g")
		new_line=${new_line}" . ${strand}"
		echo ${new_line} >> ${tmp_eqtl_bed_file}
	fi
done

eqtl_bed_file=${outprefix}.eQTLs.strand.bed
sed "s/ /\t/g" ${tmp_eqtl_bed_file} > ${eqtl_bed_file}

# # Remove temporary BED file
rm -f ${tmp_eqtl_bed_file}

# Fetch FASTA sequences for each reference allele entry of the eQTL BED file
# Reference allele FASTA is converted into all possible alternative alleles using a Python script

eqtl_ref_fasta_file=${outprefix}.eQTLs.REFERENCE.fasta
eqtl_alt_fasta_file=${outprefix}.eQTLs.ALTERNATIVE.fasta

${p2bedtools} getfasta -fi ${genomereference_fasta_file} -bed ${eqtl_bed_file} -s -name > ${eqtl_ref_fasta_file}

python ${p2script} ${variant_csv_file} ${eqtl_ref_fasta_file} ${eqtl_alt_fasta_file} ${offset}

echo "${eqtl_ref_fasta_file} and ${eqtl_alt_fasta_file} made"