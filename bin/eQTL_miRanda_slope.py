### Description ###

# This script analyzes genetic variant effects on miRNA binding and gene expression using eQTL, VCF, and single-cell RNA-seq data.
# only miRNA-variant pairs where binding lead to decreased expression are kept

### Import packages ###

import os
import pandas as pd
from scipy.stats import linregress
import argparse
import scanpy as sc
import glob
from vcf import Reader

### Input variables ###
parser = argparse.ArgumentParser(description='This script analyzes genetic variant effects on miRNA binding and gene expression using eQTL, VCF, and single-cell RNA-seq data.')
parser.add_argument('--miranda_file', help='miRanda filtered CSV as generated by eQTL_miRanda_filter.py')
parser.add_argument('--eQTL_file', help='eQTL CSV file as generated by eqtl-adjusted-pvalue.py')
parser.add_argument('--h5ad',help='a scanpy generated h5ad object with cell type annotation')
parser.add_argument('--celltype_header', default="Cell_type",help='Name of the column in adata.obs that contains cell type information')
parser.add_argument('--group_header', default="Group",help='Name of the column in adata.obs that contains group or condition information')
parser.add_argument('--sampleID_header',help='Name of the column in adata.obs that contains sampleID information')
parser.add_argument('--cell_and_group', action="store_true",help='Enable to compute gene filter for each cell type and group seperately, if not used only cell type is used')
parser.add_argument('--VCF_folder',help="folder containing chromosome split VCF files (<outprefix>_3UTR_gene_annotated_chr<chromosome number>.vcf) containing 3'UTR variants as generated by genotype_variants.sh")

args = parser.parse_args()

miranda_filtered_file = args.miranda_file
eQTL_file = args.eQTL_file
h5ad = args.h5ad
celltype_header = args.celltype_header
group_header = args.group_header
sampleID_header = args.sampleID_header
cell_and_group = args.cell_and_group
VCF_folder = args.VCF_folder

### Parameters ###
alpha = 0.05 # significance threshold

### Functions ###
def get_genotypes(adata, vcf, variant, group_header, sampleID_header, group=False):
    """Extract the allele sequences for a specific genetic variant from a variant call format file"""
    
    # import VCF file
    VCF = Reader(fsock=None, filename=vcf, prepend_chr=False, strict_whitespace=False, encoding='ascii')
    
    # filter adata for group
    
    if group == False:
        adatax = adata
    else:
        adatax = adata[(adata.obs[group_header] == group)]
        
    sample_list = set(adatax.obs[sampleID_header])
   
    # read VCF file
    genotype_dict = {}
    for ii, record in enumerate(VCF):
        rec = str(record)
        varname = str(rec.rsplit("CHROM=")[1].rsplit(",")[0] + ":"
                  + rec.rsplit("POS=")[1].rsplit(",")[0]) # varname = chr:position
        if varname in variant:
            ref = str(rec.rsplit("REF=")[1].rsplit(",")[0]) # get the reference sequence
            alts = str(rec.rsplit('ALT=[')[1].rsplit("]")[0]) # get the alternative sequences
            alts = alts.rsplit(',') 
            allels = [ref] + [i.strip() for i in alts] # append the ref and alt sequences in 1 list
            for sample_ in record.samples: # loop over the genotype results for given variant
                s = str(sample_)
                sample = str(s.rsplit("sample=")[1].rsplit(",")[0]) # get sample name
                if sample in sample_list:
                    GT = str(s.rsplit("GT=")[1].rsplit(",")[0]) # e.g. GT=1/1
                    GT = GT.replace('|','/')
                    try: # skip if genotype contains '.' (e.g. not called)
                        al1 = int(GT.rsplit('/')[0])
                        al2 = int(GT.rsplit('/')[1])
                    except:
                        continue

                    if al1 == 0 and al2 == 0:
                        gtype = '0-Homozygous REF'
                    elif al1 == 0 and al2 > 0:
                        gtype = '1-Heterozygous'
                    else:
                        gtype = '2-Homozygous ALT'

                    genotype_dict[sample] = []
                    genotype_dict[sample].append(str(allels[al1] + "/" + allels[al2])) # append variant sequences to dict
                    genotype_dict[sample].append(str(gtype + '-' + str(al2)))# append sample genotype to dict
            break
    return genotype_dict

def get_adata_sub(adata, geno, celltype, group=False):
    """Generate an adata subset and add genotype information"""
    adata_sub = adata[adata.obs[sampleID_header].isin(list(geno.keys()))].copy()
    adata_sub = adata_sub[adata_sub.obs[celltype_header] == celltype].copy()
    
    if group != False:
        adata_sub = adata_sub[adata_sub.obs[group_header] == group].copy()
    adata_sub.obs['genotype_alleles'] = adata_sub.obs[sampleID_header].apply(lambda x: geno[x][0])
    adata_sub.obs['genotype_type'] = adata_sub.obs[sampleID_header].apply(lambda x: geno[x][1])
    
    return adata_sub

def get_slope(adata_sub, gene, allele, geno):
    '''Compute the slope between gene expression level and variant genotype'''
    REF = False
    ALT = False
    swap_slope = False
    for geno in geno_dict:
        if "REF" in geno:
            REF = geno
        elif 'ALT' in geno:
            ALT = geno

    if REF != False:
        if allele in geno_dict[REF]:
            swap_slope = True
        elif allele not in geno_dict[ALT]:
            swap_slope = True
        
    x = [int(i.rsplit("-")[0]) for i in adata_sub.obs['genotype_type']]
    y = list(matrix.loc[gene,adata_sub.obs.index])


    if len(set(x)) == 1:
        slope = 0
        pvalue = 1
        return slope, pvalue

    slope, intercept, rvalue, pvalue, stderr = linregress(x, y)

    


    if swap_slope:
        slope = slope * -1
    
    return slope, pvalue


def get_REF_allele(genotype_dict):
    '''extract the sequence of the reference allele'''
    geno_list = set(str(genotype_dict[key]) for key in genotype_dict.keys())

    for geno in geno_list:
        if 'REF' in geno:
            allele = geno.rsplit("'")[1].rsplit('/')[0]
            return allele

### Code ###

# import eQTL data as a dataframe
df_eQTL_raw = pd.read_csv(eQTL_file, index_col=0, names=['gene', 'variant', 'pval', 'cell_group'])
df_eQTL_raw['pval'] = df_eQTL_raw['pval'].astype(float)

df_miranda = pd.read_csv(miranda_filtered_file, index_col=0)


df_eQTL = df_eQTL_raw[df_eQTL_raw['pval'] <= alpha]

group = df_eQTL.groupby('cell_group')

# Import anndata object
adata = sc.read_h5ad(h5ad)

# import chromosome split vcf files as a dictionary
VCF_folder = os.path.normpath(VCF_folder)
VCFfiles = glob.glob(os.path.join(VCF_folder, '*_chr*.vcf'))
chromosomes = [i.rsplit("chr")[1].rsplit(".vcf")[0] for i in VCFfiles]
vcf_dict = {}
for i,chr in enumerate(chromosomes):
    vcf_dict[chr] = VCFfiles[i]
    

matrix = pd.DataFrame(adata.raw.X.T, index=adata.raw.var.index, columns=adata.obs.index)

# calculate slopes for each miRNA-eQTL pair to select variants where gene expression goes down when there is predicted binding 
for cell_group, df in group:
    print('processing miRNA binding:',cell_group)
    Celltype = cell_group.rsplit('_')[0]
    Group = cell_group.rsplit('_')[1]
    variants = [str(v.rsplit('_')[2]+'_'+v.rsplit('_')[0]) for v in df['variant']]

    variants_in_df = list(set(variants).intersection(set(df_miranda['variant'])))

    df_sub = df_miranda[df_miranda['variant'].isin(variants_in_df)]
    df_sub = df_sub[df_sub['Score'] >= 140]

    slopes = []
    pvalues = []
    for i, target in enumerate(df_sub['Target']):
        if 'ALT=' in target:
            allele = target.rsplit('=')[1]
            gene = target.rsplit('_')[0]
            variant = target.rsplit('_')[1].rsplit('::')[0]
            chromosome = variant.rsplit(':')[0]

            geno_dict = get_genotypes(adata, vcf_dict[chromosome], variant, group_header, sampleID_header, group=Group)
            if cell_and_group:
                adata_sub = get_adata_sub(adata, geno_dict, Celltype, group=Group)
            else:
                adata_sub = get_adata_sub(adata, geno_dict, Celltype, group=False)
            slope, pvalue = get_slope(adata_sub, gene, allele, geno_dict)
            slopes.append(slope)
            pvalues.append(pvalue)

        else:
            gene = target.rsplit('_')[0]

            variant = target.rsplit('_')[1].rsplit('::')[0]
            chromosome = variant.rsplit(':')[0]
            
            if cell_and_group:
                geno_dict = get_genotypes(adata, vcf_dict[chromosome], variant, group_header, sampleID_header, group=Group)
            else:
                geno_dict = get_genotypes(adata, vcf_dict[chromosome], variant, group_header, sampleID_header, group=False)

            allele = get_REF_allele(geno_dict)

            if cell_and_group:
                adata_sub = get_adata_sub(adata, geno_dict, Celltype, group=Group)
            else:
                adata_sub = get_adata_sub(adata, geno_dict, Celltype, group=False)

            slope, pvalue = get_slope(adata_sub, gene, allele, geno_dict)
            slopes.append(slope)
            pvalues.append(pvalue)
    df_sub['slope_binding'] = slopes
    df_sub['slope_binding_pval'] = pvalues

    outfile = miranda_filtered_file.replace('.csv', f'.{Celltype}.{Group}.csv')
    df_sub.to_csv(outfile)







