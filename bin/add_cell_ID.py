### Description ###

# Reads a list of fastq files (e.g. generated by Smart-seq and Smart-seq2) where each file correspond to a single cell
# a unique cell ID is added to the sequence identifier line and produces new _cbc.fastq.gz files.

### Import packages ###

import sys, os
import argparse as argp
import numpy as np
import gzip
import pandas as pd

### Input variables ###
parser = argp.ArgumentParser(description = 'Add cellIDs to the sequence identifier line (Smart-seq), script assumes each fastq file is a single cell.')
parser.add_argument('--fq', help = 'single column txt file with Fastq file names.')
parser.add_argument('--cellid', '-cid', help = 'Headerless comma seperated cell ID txt file (column 1 fastq file name; column 2 cell ID).')
parser.add_argument('--outdir', help = 'output directory for cbc.fastq.gz and log files', type = str, default = './')
parser.add_argument('--outprefix', help = 'prefix for prefix_cbc.fastq.gz and prefix.log files', type = str, default = 'none')
parser.add_argument('--idx', help = 'index sequence', type = str, default = '')
args = parser.parse_args()

fqs = args.fq
cellIDtxt = args.cellid
outdir = args.outdir
indexSample = args.idx
fqr = args.outprefix

### Code ###

# Open cell ID file
if not os.path.isfile(cellIDtxt):
        sys.exit('cell ID file not found')
cellid_df = pd.read_csv(cellIDtxt, sep = ',', names = ['cellID'], index_col = 0)


# Create output directory if it does not exist
if not os.path.isdir(outdir):
    os.system('mkdir '+outdir)

fq_list = open(fqs, 'r').readlines()

for ff in range(len(fq_list)):
    fq = fq_list[ff].rsplit()[0]
    cellID = cellid_df.loc[fq, 'cellID']
    # Find input fastq files
    
    
    if not os.path.isfile(fq):
        sys.exit('fastq files not found')

    fqr = fq.rstrip('.fastq.gz')
    print('--- Start renaming {' + fqr + '} ---\n')
    
    
    

# Read fastq files and assign cell barcode and UMI    
    
    fout = open(outdir + '/' + fqr + '_cbc.fastq', 'w')
    ns = 0
    with gzip.open(fq) as f: 
       	for idx, l1 in enumerate(f):
            try:
                l1 = str(l1.rstrip().rsplit()[0], 'utf-8')
            except:
                continue

            l = np.mod(idx,4)
            if l == 0:
                n1 = l1
            if l == 1:
                s1 = l1
            if l == 2:
                p1 = l1[0]
            if l == 3:
                q1 = l1

                try:
                    ns += 1
                    if len(indexSample) != 0:
                        name = str(n1 + ';SM:' + cellID)
                    else:
                        name = str(n1 + ';SM:' + cellID)
                    s, q = (s1, q1)
                    if s != 'N'*len(s):
                        fout.write( '\n'.join([name, s, '+', q, '']))
                except: 
                   	continue

 
    nt = (idx+1)/4
    fout.close()
    
        
# Generate a LOG file
    fout = open(outdir + '/' + fqr + '.log', 'w')
    fout.write('=> to generate cbc file <=\n')
    fout.write(', '.join(['--------------------------','\n']))
    fout.write(', '.join(['fastq file:', str(fqr),'\n']))
    fout.write(', '.join(['total sequenced reads:', str(nt), '\n']))
    fout.close()

    print('---Added all cell IDs for fastq file {' + fqr + '} DONE ---\n-------------------------------------\n')

    ### zip fastq file ####
    os.system('gzip '+ outdir + '/' + fqr + '_cbc.fastq')

sys.exit()
