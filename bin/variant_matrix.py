### Description ### 

# Generates a matrix with the variant genotype for each sample present in a VCF file
# Selects only variants that could be called in all samples

### Import packages ###
import sys, os
import pandas as pd
import vcf
from collections import Counter
import argparse

### Input variables ###

parser = argparse.ArgumentParser(description='Generation of a matrix containing genotypes (encoded as integers) of gene annotated variants per sample')
parser.add_argument('--vcf', help="Gene annotated 3'UTR variant VCF file as generated by VCF_filtering_annotation.sh")
parser.add_argument('--outprefix', help='outprefix')
parser.add_argument('--outdir', default='.',help='output path')
args = parser.parse_args()

vcfFile = args.vcf
outprefix = args.outprefix
outdir = args.outdir

### Functions ###

def number_GT(GT_list):
    '''Processes a list of genotype (GT) strings and maps each unique genotype
    to a corresponding numerical representation.

    Parameters:
        GT_list (list of str): A list of genotype strings (e.g., ['0/0', '0/1', './.']).

    Returns:
        list of str: A list where each genotype in the input is replaced by:
            - '0' for '0/0' (homozygous reference)
            - '.' for './.' (missing genotype)
            - A unique numeric string (1-based index) for other genotypes based on sorted order.
    '''
    setgt = sorted(list(set(GT_list)))
    GT_dict = {}

    GT_dict['0/0'] = '0'
    GT_dict['./.'] = '.'
    if '0/0' in setgt:
        setgt.remove('0/0')
    if './.' in setgt:
        setgt.remove('./.')
        
    for gt in setgt:
        GT_dict[gt] = str(setgt.index(gt)+1)

    variant = [GT_dict[gt] for gt in GT_list]
    return variant

def non_unique_genotype(variant):
    '''
    Determines whether the given list of genotypes contains more than one 
    unique, non-missing genotype occurring multiple times.

    Parameters:
        variant (list of str): A list of genotype strings, possibly including '.' 
        to indicate missing data.

    Returns:
        bool: 
            - True if the list contains multiple non-unique genotypes.
            - False if all but one genotype occurs exactly once, or if the list
              only contains unique genotypes (excluding '.').
    '''
    variant = variant
    x = True
    if '.' in variant:
        variant = list(filter(lambda a: a != '.', variant))
    
    counter = Counter(variant)
    value_list = [counter[key] for key in counter] 
    if value_list.count(1) == (len(value_list)-1):
        x = False
    return x

### Code ###

if not os.path.exists(outdir):
        os.makedirs(outdir)

# read VCF file and extract sample genotypes
VCF = vcf.Reader(fsock=None, filename=vcfFile, prepend_chr=False, strict_whitespace=False, encoding='ascii')

var_dict = {}
colNames = []

for record in VCF:
    nSamples=len(record.samples)
    #if record.num_called == nSamples:
    rec = str(record)
    try:
        genes = list(record.INFO['Gene'])
    except:
        if len(var_dict) == 0:            
            print("Please annotate the VCF file with gene name (e.g. vcf-annotate)")
            exit()
        else:
            genes = False

    if genes != False:
        for gene in genes:
            varname = str(rec.rsplit("CHROM=")[1].rsplit(",")[0] + ":"
                  + rec.rsplit("POS=")[1].rsplit(",")[0] + "_"
                  + rec.rsplit("REF=")[1].rsplit(",")[0] + "_"
                  + gene + "_")
            
            variant = []
            
            GTs = []
            for sample in record.samples:
                    s = str(sample)
                    sampleID = str(s.rsplit("sample=")[1].rsplit(",")[0])
                    GT = str(s.rsplit("GT=")[1].rsplit(",")[0])
                    GT = GT.replace('|','/')
                    if sampleID not in colNames:
                        colNames.append(sampleID)
                    GTs.append(GT)
            variant = number_GT(GTs)
            
            non_unique = non_unique_genotype(variant)
            if non_unique == True:
                var_dict[varname] = variant
                print(varname)

if outdir[-1] == '/':
    outdir == outdir[:-1]

csvOut = f'{outdir}/{outprefix}.genotype_matrix.csv'

featureName = 'three_prime_UTR'


df = pd.DataFrame.from_dict(var_dict, orient='index', columns=colNames)               
df.to_csv(csvOut, sep =',')

sys.exit()
