### Description ###

#Adjust and filter p-value and average downsampled eQTL iterations into a single file

### Import packages ###
import pandas as pd
import numpy as np
import glob
import os
import argparse

### Input variables ###
parser = argparse.ArgumentParser(description='Adjust and filter p-value and average downsampled eQTL iterations into a single file')
parser.add_argument('--input_folder', help='folder containing eQTL unfiltered CSVs ( <celltype>_<group>_<i>_eQTL.csv) as generated by eQTL_shark_optimized_downsample.py')
parser.add_argument('--filter_file', help = 'gene filtering CSV file, as generated by generate_gene_filter')
parser.add_argument('--filter', help = 'filter based on gene expression', action='store_true')

args = parser.parse_args()

adjusted_pvalue_pyscript = 'eQTL-adjusted-pvalue.py'

input_folder= args.input_folder
filter_file = args.filter_file
Filter = args.filter

### Functions ###

def mean(dfs,idx):
    '''Compute the average p-value'''
    values = []
    for i in dfs:
        df = dfs[i]
        if idx in df.index:
            values.append(df.loc[idx,'pval'])
    return np.mean(values)

### Code ###

files = glob.glob(f'{input_folder}/*eQTL.csv')

# adjust p-value and addjust 
for file in files:
  os.system(f'python {adjusted_pvalue_pyscript} --eqtl {file}')

# average eQTLs into one file
files = glob.glob(f'{input_folder}/*eQTL.unfiltered.adjusted-pvalue.csv')

dfs = {}

for file in files:
    name = file.rsplit('/')[-1].rsplit('_')[2]
    dfs[name] = pd.read_csv(file, names=['gene', 'var','pval','cell'], index_col='var')
    
# take the largest dataframe    
largest = 0
df = dfs['1']
for i in dfs:
    if dfs[i].shape[0] > largest:
        df = dfs[i]
        largest = dfs[i].shape[0]

for idx in df.index:
    df.loc[idx,'pval'] = mean(dfs,idx)

# out file name
for file in files:
    if '_1_' in file:
        file_name_out = file.replace('_1_', '_downsampling_')
        break  

df.to_csv(file_name_out, header=False, index=True)

print(f'combined file made: {file_name_out}')

# extract celltype from file name
filename = files[0].rsplit('/')[-1]
number = filename.rsplit('_')[2]
celltype = filename.rsplit(f'_{number}_')[0]

# select genes with pass filter for this celltype
if Filter:
    df_filter_matrix = pd.read_csv(filter_file,index_col=0)
    genes_passed = df_filter_matrix[df_filter_matrix[celltype] == 'PASS'].index.to_list()
    gene_dict = {g.rsplit('>')[0]:g for g in set(df.gene)}
    select_genes = [gene_dict[g] for g in genes_passed if g in gene_dict.keys()]
    df_filtered = df[df.gene.isin(select_genes)]
    outfile_filtered = file_name_out.replace('unfiltered.', '')

    df.to_csv(outfile_filtered, header=False, index=True)

sys.exit()

