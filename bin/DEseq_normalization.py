### Description ### 

# Generates a matrix with the raw gene expression for each sample present and normalize using DESeq

### Import packages ###
import sys, os
import pandas as pd
import scanpy as sc
import argparse
import glob
import scanpy as sc

### Input variables ###

parser = argparse.ArgumentParser(description='Generates a matrix with the raw gene expression for each sample present and normalize using DESeq')
parser.add_argument('--count_folder', help="folder containing <outprefix>_count-matrix.tsv files as generated by count_genes.sh")
parser.add_argument('--h5ad',help='a scanpy generated h5ad object with cell type annotation')
parser.add_argument('--outprefix', help='outprefix')
parser.add_argument('--outdir', default='.',help='output path')
args = parser.parse_args()

count_folder = args.count_folder
h5ad = args.h5ad
outprefix = args.outprefix
outdir = args.outdir

### Code ###

if not os.path.exists(outdir):
        os.makedirs(outdir)

# merge sample count tables into a single large dataframe
files = glob.glob(f'{count_folder}/*_count-matrix.tsv')

dfs = {}
for file in files:
    df = pd.read_csv(file, sep='\t',index_col=0)
    dfs[file] = df

df_merge = pd.concat(dfs.values(), axis=1)

# select cells that passed the filtering criteria from an adata object
adata = sc.read_h5ad(h5ad)
cell_IDs = list(adata.obs.index)

df_merge = df_merge.loc[:,cell_IDs]

outfile = f'{outdir}/{outprefix}_filtered_count_matrix.csv'
df_merge.to_csv(outfile)

# normalize the raw counts using the SCeQTL normalize() function
outfile_normalized = f'{outdir}/{outprefix}_filtered_count_matrix_normalized.csv'

Rscript = 'SCeQTL_normalize.R'
os.system(f'Rscript {Rscript} {outfile} {outfile_normalized}')

sys.exit()
