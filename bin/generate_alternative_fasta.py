#!bin/python

### Description ###
# This script takes a FASTA file containing reference allele 
# sequences and converts them to alternative allele sequences

### Import packages ###

import sys
import argparse
import vcf
import pandas as pd
from Bio import SeqIO

### Input variables ###

parser = argparse.ArgumentParser(description='This script takes a FASTA file containing reference allele sequences and converts them to alternative allele sequences')
parser.add_argument('variant_csv_file', help='input variant CSV file (<outprefix>.eQTLs.pos_alt_ref.csv) as generated by eqtl_to_fasta.sh')
parser.add_argument('eqtl_ref_fasta_file', help='input reference eQTL FASTA file (<outprefix>.eQTLs.REFERENCE.fasta) as generated by eqtl_to_fasta.sh')
parser.add_argument('eqtl_alt_fasta_file', help='output reference eQTL FASTA file')
parser.add_argument('offset', help='offset used in eqtl_to_fasta.sh', type = int)

args = parser.parse_args()

pos_file = args.variant_csv_file
fasta_file = args.eqtl_ref_fasta_file
out_fasta_file = args.eqtl_alt_fasta_file
offset = args.offset

### Functions ###
def reverse_complement(seq, strand):
    """
    Takes a nucleotide sequence and converts this to reverse complement if
    the strand is antisense (-).

    Args:
        seq (string): Nucleotide sequence.
        strand (string): Strand as "+"" or "-".

    Returns:
        string: Nucleotide sequence.
    """

    complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
    
    if strand == '-':
    	reverse_comp_seq = ''.join(complement[n] for n in seq[::-1])
    else:
    	reverse_comp_seq = seq

    return reverse_comp_seq


### Code ###

# Read the reference FASTA file
fasta_reader = SeqIO.parse(open(fasta_file),'fasta')

# Import CSV file as Pandas DataFrame
df_pos = pd.read_csv(pos_file, sep="\t", names=['chr', 'pos', 'ref', 'alt'])
df_pos['var'] = df_pos['chr'].astype(str) + ":" + df_pos['pos'].astype(str)
df_pos.index = df_pos['var']
df_pos['alt'] = [alt.rsplit(',') for alt in df_pos['alt']]

# Generate the alternative FASTA file by converting the reference allele to alternative allele
with open(out_fasta_file, 'w') as out_fasta:
	for fasta in fasta_reader:
		name, sequence = fasta.id, str(fasta.seq)
		variant = name.rsplit('::')[0].rsplit('_')[1]
		strand = name.rsplit('(')[-1].rsplit(')')[0]
		REF = df_pos.loc[variant,'ref']
		
		ALTs = df_pos.loc[variant, 'alt']

		for ALT in ALTs:
			if "*" in ALT:
				continue
			else:
				sequence_new = sequence[:offset-1] + sequence[offset-1:].replace(reverse_complement(REF, strand), reverse_complement(ALT, strand), 1)
				out_fasta.write(f">{name}_ALT={ALT}\n")
				out_fasta.write(f"{sequence_new}\n")

sys.exit()
