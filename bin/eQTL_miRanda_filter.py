#!/usr/bin/python3

### Description ###
# Filter miRanda CSV file for differentially expressed miRNA-target binding

### Import packages ###
import sys
import pandas as pd
import numpy as np
import argparse

### Input variables ###
parser = argparse.ArgumentParser(description='Filter miRanda CSV file for differentially expressed miRNA-target binding')
parser.add_argument('--miranda_file', help='miRanda unfiltered CSV (<outprefix>.miranda.out.csv) as generated by eqtl_miRanda.sh')
parser.add_argument('--fasta_file', help='ALT_REF target FASTA file (<outprefix>.eQTLs.ALT_REF.fasta) as generated by eqtl_miRanda.sh')

args = parser.parse_args()

miranda_file = args.miranda_file
fasta_file = args.fasta_file

### Parameters ###
score_treshold = 140

### Functions ###

def match(df):
    """
    Takes a miRanda DataFrame and returns true if there are rows with a Score above the score treshold

    Args:
        df (DataFrame): miRanda DataFrame

    Returns:
        bool: True or False
    """
    match_length = df[df['Score'] >= score_treshold].shape[0]
    if match_length == 0:
        return False
    else:
        return True

def allele_binding_disruption(df, variant, variants):
    """
    Determine if allele binding is disrupted by comparing the length of targets with all variants
    If the length is the same, the alternative allele does not influence binding.

    Args:
        df (DataFrame): miRanda DataFrame
        variant (string): variant
        variants (dictionary): variant dictionary 

    Returns:
        bool: True or False
    """
    length_target = len(set(df['Target']))
    length_variants = len(variants[var])
    if length_target != length_variants:
        return True
    else:
        return False


### Code ###

# import miranda output csv as panda dataframe

df_miranda = pd.read_csv(miranda_file, sep=',',names=['mirna','Target','Score','Energy-Kcal/Mol','Query-Aln(start-end)','Subjetct-Al(Start-End)','Al-Len','Subject-Identity','Query-Identity'])
df_miranda['variant'] = df_miranda['Target'].apply(lambda x: x.rsplit('::')[0])
df_miranda.loc[:,['mirna','variant','Target','Score','Energy-Kcal/Mol','Query-Aln(start-end)','Subjetct-Al(Start-End)','Al-Len','Subject-Identity','Query-Identity']]

# import FASTA file in a dictionary

FASTA = open(fasta_file, "r")

FASTA_dict = {}
for line in FASTA.readlines():
    line = line.rstrip('\n')
    if '>' in line:
        name = line
    else:
        FASTA_dict[name] = line

# generate a dictionary with variants as key and REF and ALT target names as values

variants = {i.rsplit('::')[0].lstrip('>'):[] for i in FASTA_dict.keys()}

for var in variants:
    for v in FASTA_dict.keys():
        if var in v:
            variants[var].append(v.lstrip('>'))

# filter miRanda csv file for differential miRNA-target pairs

index_selection = []

# group dataframe by variant
group_var = df_miranda.groupby('variant')

print(f'start processing {miranda_file}')

for gv in group_var:
    var, df_v = gv
    # group variant dataframe by miRNA
    group_mir = df_v.groupby('mirna')
    for gm in group_mir:
        mir, df_m = gm
        
        # Check if there are any matches for miRNA binding
        if match(df_m):
            
                # only select entries with binding scores above the treshold (considered as binding)
                df = df_m[df_m['Score'] >= score_treshold]
                
                # check if the miRNA differentially binds to REF or ALT alleles
                if allele_binding_disruption(df, var, variants):
                    # append this miRNA to a list of indexes
                    index_selection += list(df_m.index)

# output filtered miRanda csv file
df_miranda_selection = df_miranda.loc[index_selection]
df_miranda_selection.index = range(df_miranda_selection.shape[0])
df_miranda_selection.to_csv(miranda_file.replace('.csv','.filtered.csv'))

mirna_before = str(len(set(df_miranda['mirna'])))
mirna_after = str(len(set(df_miranda_selection['mirna'])))
target_before = str(len(set(df_miranda['variant'])))
target_after = str(len(set(df_miranda_selection['variant'])))


fout = open(miranda_file.replace('.csv','.log'), 'w')
fout.write('===miranda_file filtering====\n')
fout.write(f'file:{miranda_file}\n')
fout.write(f'miRNAs before filtering: {mirna_before}\n')
fout.write(f'miRNAs after filtering: {mirna_after}\n')
fout.write(f'Targets before filtering: {target_before}\n')
fout.write(f'Targets after filtering: {target_after}\n')

fout.close()

print(f'made {miranda_file.replace('.csv','.filtered.csv')}')

sys.exit()

