### Description ###

# Code to perform p-value adjustment using the Benjamini-Hockberg FDR procedure
# optional filtering based on gene expression levels

### Import packages ###
import sys, os
import os.path
import math
import pandas as pd
from statsmodels.stats import multitest
import argparse as argp

### Input variables ###
parser = argp.ArgumentParser(description = 'calculation of Benjamini-Hockberg FDR p-values')
parser.add_argument('--eqtl', help = 'CSV file with eQTLs, as generated by eQTL_computation.py')
parser.add_argument('--filter_file', help = 'gene filtering CSV file, as generated by generate_gene_filter')
parser.add_argument('--filter', help = 'filter based on gene expression', action='store_true')

args = parser.parse_args()

eqtl = args.eqtl
filter_file = args.filter_file
Filter = args.filter

### Parameters ###
alpha = 0.05 # significance threshold

### Functions ###

def none_or_nan(p):
	'''Add a non significant numerical value (i.e. 1) to non computed variants'''
	if p == 'None':
		p = 1
	elif math.isnan(float(p)):
		p = 1
	return p

def matrix_to_txt(df, text_file):
	'''generate a txt file that is used for filtering with grep (bash)'''
	f = open(text_file, "w")
	for idx in df.index:
		for col in df.columns:
			filter = df.loc[idx, col]
			if filter == "PASS" :
				f.write(f"_{idx}_.*{col}\n")

	f.close()

### Code ###

df = pd.read_csv(eqtl, names=['gene', 'variant', 'pvalue', 'cell_group'])
	
# replace None and nan values as 1
df['pvalue_nan'] = df['pvalue'].apply(lambda p:  none_or_nan(p))
df['pvalue_nan'] = df['pvalue_nan'].astype(float)

# calculate FDR adjusted p-values based per gene
print("start p-value correction")

pvals_adjusted = []
genes = []
for gene in df.gene:
    if gene not in genes:
        df_gene = df[df['gene'] == gene]
        rejected, pvals_adj = multitest.fdrcorrection(list(df_gene['pvalue_nan']), alpha=alpha, method='indep', is_sorted=False)
        pvals_adjusted = pvals_adjusted + list(pvals_adj)
        genes.append(gene)

df['adj_pvalue'] = pvals_adjusted

dfn = df.loc[:,['gene', 'variant', 'adj_pvalue', 'cell_group']]

outfile = eqtl.replace('.csv', '.unfiltered.adjusted-pvalue.csv')
dfn.to_csv(outfile, index=False, header=False)

# filtering based on general gene expression

if Filter: # only if True
	text_file = filter_file.replace('.csv', '.PASS.txt')
	df_filter_matrix = pd.read_csv(filter_file,index_col=0)

	command = f"rm -f {text_file}"
	os.system(command)

	if not os.path.isfile(text_file):
		matrix_to_txt(df_filter_matrix, text_file)

	outfile_filtered = eqtl.replace('.csv', '.adjusted-pvalue.csv')
	command = f"grep -f {text_file} {outfile} > {outfile_filtered}"

	print("start filtering")
	os.system(command)


	print(outfile_filtered, 'made')


sys.exit()
